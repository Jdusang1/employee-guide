{"version":3,"sources":["components/Container.js","components/EmployeeDetail.js","components/Table.js","components/SearchForm.js","components/TitleCard.js","utils/API.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","children","EmployeeDetail","filteredEmployee","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","src","medium","first","last","date","Table","heading","handleSort","width","style","onClick","toLowerCase","SearchForm","onChange","e","searchEmployees","type","placeholder","id","TitleCard","axios","get","EmployeeContainer","state","result","order","handleInputChange","event","setState","target","value","search","filter","data","Object","values","join","indexOf","handleFormSubmit","preventDefault","API","then","res","results","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5cf11dc9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n\n}\n\nexport default Container;","import React from \"react\";\n\n\n\nfunction EmployeeDetail({ filteredEmployee }) {\n    return (\n        <tbody>\n            {\n                filteredEmployee[0] !== undefined && filteredEmployee[0].name !== undefined ? (\n                    filteredEmployee.map(({\n                        login, name, picture, phone, email, dob\n                    }) => {\n                        return (\n                            <tr key={login.uuid}>\n                                <td data-th=\"image\">\n                                    <img src={picture.medium}></img>\n\n                                </td>\n                                <td data-th=\"name\">\n                                    {name.first} {name.last}</td>\n                                <td data-th=\"phone\">\n                                    {phone}\n\n                                </td>\n                                <td data-th=\"email\">\n                                    {email}\n\n                                </td>\n                                <td data-th=\"dob\">\n                                    {dob.date}\n\n                                </td>\n                            </tr>\n                        )\n                    })\n                ) : (\n                        <>\n                        </>\n                    )\n            }\n\n        </tbody>\n    );\n}\n\nexport default EmployeeDetail; ","import React from \"react\";\nimport EmployeeDetail from \"./EmployeeDetail\";\n\nfunction Table({ heading, filteredEmployee, handleSort }) {\n    return (\n        <div>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        {heading.map(({ name, width }) => {\n                            return (\n                                <th className=\"col\"\n                                    key={name}\n                                    style={{ width }}\n                                    onClick={() => {\n\n                                        handleSort(name.toLowerCase())\n\n                                    }}>\n                                    <span className=\"pointer\"></span>\n                                    {name}\n\n\n                                </th>\n                            )\n                        })}\n                    </tr>\n                </thead>\n                <EmployeeDetail\n                    filteredEmployee={filteredEmployee} />\n            </table>\n        </div>\n    )\n}\n\nexport default Table; ","import React from \"react\";\n\nfunction SearchForm(props) {\n    return (\n        <form>\n            <div className=\"form-group\">\n\n                <input\n                    onChange={e => props.searchEmployees(e)}\n\n                    name=\"name\"\n                    className=\"form-control text-center\"\n                    type=\"text\"\n                    placeholder=\"Search Employee's\"\n                    id=\"search\">\n                </input>\n\n            </div>\n        </form>\n    )\n};\n\nexport default SearchForm; ","import React from \"react\";\n// Will Show at top of every site \nfunction TitleCard(props) {\n    return (\n        <div className=\"card-centered\">\n            <div className=\"card-body text-center\">\n                Employee Registry\n            </div>\n        </div>\n    );\n}\n\nexport default TitleCard;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=50&nat=us\";\n\n\nexport default {\n    search: function () {\n        return axios.get(BASEURL)\n    }\n}; ","import React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Table from \"./Table\";\n\n\nimport SearchForm from \"./SearchForm\";\nimport TitleCard from \"./TitleCard\";\nimport API from \"../utils/API\";\n\n\n\nclass EmployeeContainer extends Component {\n    state = {\n        result: [{}],\n        name: \"\",\n        filteredEmployee: [{}],\n        order: \"descend\"\n    };\n\n\n    // whenever this component loads the search employees is called\n    componentDidMount() {\n        API.search()\n            .then(res => this.setState({ result: res.data.results, filteredEmployee: res.data.results }))\n            .catch(err => console.log(err));\n    }\n\n    heading = [\n        {\n            name: \"image\",\n            width: \"20%\",\n\n        },\n        {\n            name: \"name\",\n            width: \"20%\",\n\n        },\n        {\n            name: \"email\",\n            width: \"20%\",\n\n        }, {\n            name: \"phone\",\n            width: \"20%\",\n\n        }, {\n            name: \"dob\",\n            width: \"20%\",\n\n        },\n    ]\n\n    handleInputChange = event => {\n        this.setState({ name: event.target.value });\n    }\n\n    handleSort = heading => {\n        if (this.state.order === \"descend\") {\n            this.setState({ order: \"ascend\" })\n        } else {\n            this.setState({ order: \"descend\" })\n        }\n        const compare = (a, b) => {\n            if (this.state.order === \"ascend\") {\n                if (a[heading] === undefined) {\n                    return 1;\n                } else if (b[heading] === undefined) {\n                    return -1;\n                } else if (heading === \"name\") {\n                    return a[heading].first.localeCompare(b[heading].first)\n\n                } else {\n                    return a[heading] - b[heading];\n                }\n            } else {\n                if (this.state.order === \"ascend\") {\n                    if (a[heading] === undefined) {\n                        return 1;\n                    } else if (b[heading] === undefined) {\n                        return -1;\n                    }\n                    else if (heading === \"name\") {\n                        return b[heading].first.localeCompare(a[heading].first)\n\n                    } else {\n                        return b[heading] - a[heading];\n                    }\n                }\n            }\n            const sorted = this.state.filteredEmployee.sort(compare)\n            this.setState({ filteredEmployee: sorted })\n        }\n    };\n\n\n    searchEmployees = event => {\n        const search = event.target.value\n        const filter = this.state.result.filter(data => {\n            let values = Object.values(data).join(\"\").toLowerCase()\n            return values.indexOf(search.toLowerCase()) !== -1\n        })\n        this.setState({\n            filteredEmployee: filter\n        })\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.searchEmployees()\n    }\n\n\n\n\n    render() {\n        return (\n            <Container>\n                <TitleCard />\n                <SearchForm\n                    searchEmployees={this.searchEmployees}\n\n                    handleInputChange={this.handleInputChange}\n\n\n                />\n                <Table\n                    heading={this.heading}\n                    filteredEmployee={this.state.filteredEmployee}\n                    handleSort={this.handleSort}\n                />\n            </Container>\n\n        );\n    }\n\n}\n\n\n\n\n\nexport default EmployeeContainer; ","import React from 'react';\nimport EmployeeContainer from './components/EmployeeContainer';\n\n\nfunction App() {\n  return (\n    <div>\n      <EmployeeContainer />\n    </div >\n  )\n\n};\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}